include:
  - template: Security/SAST.gitlab-ci.yml

cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

variables:
   VERSION: 1.0.${CI_PIPELINE_ID}
   MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
   JAVA_OPTS: -XX:MaxRAMPercentage=90 # Для того, чтобы Maven не съел всю свободную оперативку

stages:
  - build
  - test
  - notify
  - release
  - deploy

build-backend-code-job:
  stage: build
  script:
    - cd backend
    - >
      mvn package -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository
      -Dversion.application=${VERSION}
  artifacts:
    paths:
      - backend/target/sausage-store-${VERSION}.jar
      - ${CI_PROJECT_DIR}/.m2/

spotbugs-sast:
  stage: test
  needs:
    - job: build-backend-code-job
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 11
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository

sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16
  needs:
    - job: build-backend-code-job
  script: |
    cd backend/
    mvn verify sonar:sonar \
    -Dsonar.host.url=$SONARQUBE_URL \
    -Dsonar.projectKey=$SONAR_PROJECT_KEY_BACK \
    -Dsonar.login=$SONAR_LOGIN_BACKEND \
    -Dsonar.qualitygate.wait=true

telegram-notification-backend:
  stage: notify
  needs:
    - job: sonarqube-backend-sast
    - job: spotbugs-sast
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /notification/
  script: |
    curl -X POST -H "Content-type: application/json" \
    --data "{\"chat_id\": \"-1002056379103\", \"text\": \"Павел Науменко собрал и протестировал backend by sast and sonarqube. URL: $CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_SHA/download?job=build-backend-code-job\"}" \
    https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage

upload-backend-release:
  stage: release
  needs:
    - job: build-backend-code-job
  script:
    - cd backend
    - >
      mvn deploy -DskipTests
      -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository
      -s settings.xml -Dversion.application=${VERSION}

deploy:
  stage: deploy
  needs:
    - job: upload-backend-release
  before_script:
    #устанавливаем ssh-agent для удобства аутентификации по ssh
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    #сохраняем сгенеренный ранее приватный ключ для раннера
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - SSH_KNOWN_HOSTS=$(ssh-keyscan ${DEV_HOST})
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp ./backend/sausage-store-backend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage-store-backend.service
    - >
      ssh ${DEV_USER}@${DEV_HOST} "export "CURRENT_VERSION=${VERSION}";
      export "VERSION=${VERSION}";
      export "DEV_HOST=${DEV_HOST}";
      export "MONGO_USER=${MONGO_USER}";
      export "MONGO_PASSWORD=${MONGO_PASSWORD}";
      export "MONGO_HOST=${MONGO_HOST}";
      export "MONGO_PORT=${MONGO_PORT}";
      export "MONGO_DATABASE=${MONGO_DATABASE}";
      export "NEXUS_REPO_URL=${NEXUS_REPO_URL}";
      export "NEXUS_REPO_USER=${NEXUS_REPO_USER}";
      export "NEXUS_REPO_PASS=${NEXUS_REPO_PASS}";
      export "NEXUS_REPO_BACKEND_NAME=${NEXUS_REPO_BACKEND_NAME}";
      export "PSQL_DBNAME=${PSQL_DBNAME}";
      export "PSQL_HOST=${PSQL_HOST}";
      export "PSQL_PASSWORD=${PSQL_PASSWORD}";
      export "PSQL_PORT=${PSQL_PORT}";
      export "PSQL_USER=${PSQL_USER}";
      export "KEYSTORE_PASSWORD=${KEYSTORE_PASSWORD}";
      setsid /bin/bash -s " < ./backend/deploy.sh

  environment:
    name: review_backend/$CI_COMMIT_REF_NAME
    url: http://${DEV_HOST}/api/products
    auto_stop_in: 1 day
  # rules:
  #   - when: manual