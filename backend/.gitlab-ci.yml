include:
  - template: Security/SAST.gitlab-ci.yml

cache:
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

stages:
  - build
  - test
  - notify
  - deploy

build-backend-image:
  stage: build
  image: 
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/infra/Dockerfile_backend"
      --destination "${CI_REGISTRY_IMAGE}/sausage-backend:latest"
      --build-arg VERSION=$VERSION
      --cache=true

spotbugs-sast:
  stage: test
  needs:
    - job: build-backend-image
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 11
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  rules:
    - changes:
      - backend/*

sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16
  needs:
    - job: build-backend-image
  allow_failure: true
  script: |
    cd backend/
    mvn verify sonar:sonar \
    -Dsonar.host.url=$SONARQUBE_URL \
    -Dsonar.projectKey=$SONAR_PROJECT_KEY_BACK \
    -Dsonar.login=$SONAR_LOGIN_BACKEND \
    -Dsonar.qualitygate.wait=true
  only:
    changes:
    - backend/*

telegram-notification-backend:
  stage: notify
  needs:
    - job: sonarqube-backend-sast
    - job: spotbugs-sast
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /notification/
  script: |
    curl -X POST -H "Content-type: application/json" \
    --data "{\"chat_id\": \"-1002056379103\", \"text\": \"Павел Науменко собрал и протестировал backend by sast and sonarqube. URL: $CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_SHA/download?job=build-backend-code-job\"}" \
    https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage

deploy:
  stage: deploy
  needs:
    - spotbugs-sast
    - sonarqube-backend-sast
  before_script:
    # устанавливаем ssh-agent для удобства аутентификации по ssh
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    # сохраняем сгенеренный ранее приватный ключ для раннера
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - SSH_KNOWN_HOSTS=$(ssh-keyscan ${DEV_HOST})
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - |
      cat > infra/.env << EOT
      VERSION="${VERSION}"
      SPRING_DATASOURCE_URL="${SPRING_DATASOURCE_URL}"
      SPRING_DATASOURCE_USERNAME="${SPRING_DATASOURCE_USERNAME}"
      SPRING_DATASOURCE_PASSWORD="${SPRING_DATASOURCE_PASSWORD}"
      SPRING_DATA_MONGODB_URI="${SPRING_DATA_MONGODB_URI}"
      MONGO_USER="${MONGO_USER}"
      MONGO_PASSWORD="${MONGO_PASSWORD}"
      MONGO_HOST="${MONGO_HOST}"
      MONGO_DATABASE="${MONGO_DATABASE}"
      NEXUS_REPO_USER="${NEXUS_REPO_USER}"
      NEXUS_REPO_URL="${NEXUS_REPO_URL}"
      NEXUS_REPO_PASS="${NEXUS_REPO_PASS}"
      KEYSTORE_PASSWORD="${KEYSTORE_PASSWORD}"
      CI_REGISTRY_IMAGE="${CI_REGISTRY_IMAGE}"
      LOG_PATH=/var/log/sausage-store/sausage-store-backend.log
      REPORT_PATH=/var/log/sausage-store/report.log
      EOT
    - ssh ${DEV_USER}@${DEV_HOST} 'rm -f .env'
    - scp ./infra/docker-compose-production.yml ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/docker-compose-production.yml
    - scp ./infra/nginx.conf ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/nginx.conf
    - scp ./infra/.env ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/.env
    - ssh ${DEV_USER}@${DEV_HOST} 'docker compose -f docker-compose-production.yml stop sausage-backend || true'
    - ssh ${DEV_USER}@${DEV_HOST} 'docker compose -f docker-compose-production.yml rm -f sausage-backend || true'
    - ssh ${DEV_USER}@${DEV_HOST} 'docker compose -f docker-compose-production.yml up --force-recreate -d sausage-backend'

