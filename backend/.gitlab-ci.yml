include:
  - template: Security/SAST.gitlab-ci.yml

stages:
  - build
  - test
  - notify
  - deploy

build-backend-image:
  stage: build
  image: 
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/infra/Dockerfile_backend"
      --destination "${CI_REGISTRY_IMAGE}/sausage-backend:latest"
      --build-arg VERSION=$VERSION
      --cache=true

# spotbugs-sast:
#   stage: build
#   needs:
#     - job: build-backend-image
#   variables:
#     COMPILE: "false"
#     SAST_JAVA_VERSION: 11
#     MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository

# sonarqube-backend-sast:
#   stage: test
#   image: maven:3.8-openjdk-16
#   allow_failure: true
#   needs:
#     - job: build-backend-image
#   script: |
#     cd backend/
#     mvn verify sonar:sonar \
#     -Dsonar.host.url=$SONARQUBE_URL \
#     -Dsonar.projectKey=$SONAR_PROJECT_KEY_BACK \
#     -Dsonar.login=$SONAR_LOGIN_BACKEND \
#     -Dsonar.qualitygate.wait=true \
#     -DskipTests=true

# telegram-notification-backend:
#   stage: notify
#   needs:
#     - job: sonarqube-backend-sast
#   rules:
#     - if: $CI_COMMIT_MESSAGE =~ /notification/
#   script: |
#     curl -X POST -H "Content-type: application/json" \
#     --data "{\"chat_id\": \"-1002056379103\", \"text\": \"Павел Науменко собрал и протестировал backend by sast and sonarqube. URL: $CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_SHA/download?job=build-backend-code-job\"}" \
#     https://api.telegram.org/bot<YOUR_BOT_TOKEN>/sendMessage

deploy:
  image: vault:1.11.3
  stage: deploy
  # needs:
  #   - job: sonarqube-backend-sast
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - |
      export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=sausage-store jwt=$CI_JOB_JWT)"
      cat > infra/.env << EOT
      VERSION="${VERSION}"
      SPRING_DATASOURCE_URL="$(vault kv get -field=spring.datasource.url secret/sausage-store)"
      echo $SPRING_DATASOURCE_URL
      SPRING_DATASOURCE_USERNAME="$(vault kv get -field=spring.datasource.username secret/sausage-store)"
      echo $SPRING_DATASOURCE_USERNAME
      SPRING_DATASOURCE_PASSWORD="$(vault kv get -field=spring.datasource.password secret/sausage-store)"
      echo $SPRING_DATASOURCE_PASSWORD
      SPRING_DATA_MONGODB_URI="$(vault kv get -field=spring.data.mongodb.uri secret/sausage-store)"
      MONGO_USER="${MONGO_USER}"
      MONGO_PASSWORD="${MONGO_PASSWORD}"
      MONGO_HOST="${MONGO_HOST}"
      MONGO_DATABASE="${MONGO_DATABASE}"
      NEXUS_REPO_USER="${NEXUS_REPO_USER}"
      NEXUS_REPO_URL="${NEXUS_REPO_URL}"
      NEXUS_REPO_PASS="${NEXUS_REPO_PASS}"
      KEYSTORE_PASSWORD="${KEYSTORE_PASSWORD}"
      CI_REGISTRY_IMAGE="${CI_REGISTRY_IMAGE}"
      MINIO_ROOT_USER="${MINIO_ROOT_USER}"
      MINIO_ROOT_PASSWORD="${MINIO_ROOT_PASSWORD}"
      LOG_PATH=/var/log/sausage-store/sausage-store-backend.log
      REPORT_PATH=/var/log/sausage-store/report.log
      EOT
    - ssh ${DEV_USER}@${DEV_HOST} 'rm -f .env'
    - scp ./infra/docker-compose-production.yml ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/docker-compose-production.yml
    - scp ./infra/nginx.conf ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/nginx.conf
    - scp ./infra/.env ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/.env
    - ssh ${DEV_USER}@${DEV_HOST} 'docker compose -f docker-compose-production.yml stop sausage-backend || true'
    - ssh ${DEV_USER}@${DEV_HOST} 'docker compose -f docker-compose-production.yml rm -f sausage-backend || true'
    - ssh ${DEV_USER}@${DEV_HOST} 'docker compose -f docker-compose-production.yml up --force-recreate -d sausage-backend'
